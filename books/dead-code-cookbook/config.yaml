title: "DEAD CODE COOKBOOK"
summary: "☠️デッドコードクックブック☠️
~デッドコードの作り方と復活の呪文~


[デッドコードレシピ一覧]
1. 🔖中断を利用するパターン
  1-1. 🧪return後のコード
  1-2. 🧪throw後のコード
  1-3. 🧪break後のコード
  1-4. 🧪goto後のコード
  1-5. 🧪exit後のコード
  1-6. 🧪常にthrowする関数呼出後のコード
  1-7. 🧪常にbreakする高階関数呼出後のコード
  1-8. 🧪常に実行時エラーとなる処理後のコード
  1-9. 🧪常に条件がfalseとなるassert後のコード
2. 🔖終らない処理を利用するパターン
  2-1. 🧪無限ループ後のコード
  2-2. 🧪終らない関数呼出後のコード
3. 🔖単独で常にfalseとなる条件を利用するパターン
  3-1. 🧪単独で常にfalse(リテラル)となる条件のif文
  3-2. 🧪単独で常にfalse(定数)となる条件のif文
  3-3. 🧪単独で常にfalse(変数)となる条件のif文
  3-4. 🧪単独で常にfalse(演算結果)となる条件のif文
4. 🔖並列な複数の条件を利用するパターン
  4-1. 🧪部分集合条件のelseif
  4-2. 🧪部分集合条件のcase(switch)
  4-3. 🧪空集合条件のelse
  4-4. 🧪空集合条件のdefault(switch)
5. 🔖ネストした複数の条件を利用するパターン
  5-1. 🧪部分集合条件のif(ネスト)
6. 🔖if以外の条件を利用するパターン
  6-1. 🧪for継続条件が空集合条件
  6-2. 🧪while継続条件が空集合条件
  6-3. 🧪三項演算子が空集合条件
  6-4. 🧪短絡評価が空集合条件
  6-5. 🧪catchすることのないcatch節
  6-6. 🧪次要素のないイテレータ
  6-7. 🧪常にnullに対するnull条件演算子
7. 🔖高階関数を利用するパターン
  7-1. 🧪空集合要素に対する高階関数
  7-2. 🧪余分な高階関数の引数
8. 🔖定義のみで使用されないパターン
  8-1. 🧪定義のみの関数
  8-2. 🧪定義のみのプライベートメソッド
  8-3. 🧪オーバライドされたメソッド
9. 🔖その他のパターン
  9-1. 🧪１回しか実行されないのジェネレータのyield後のコード

[レイズ一覧]
1. 👼中断コード削除
2. 👼ネスト修正による中断コードの移動
3. 👼実行時エラー修正
4. 👼関数呼出処理修正
5. 👼条件削除
6. 👼条件修正

[ゾンビ化一覧]
1. 🧟goto文のラベルによるジャンプ
2. 🧟ホイスティング
3. 🧟実行時除去
4. 🧟定義の上書き
5. 🧟内側のスコープによる隠蔽

[デッドコードツール一覧]
1. 🔪終らない関数
2. 🔪比較演算子を用いた常に同じ真偽値となる演算
3. 🔪数値演算を用いた常に同じ真偽値となる演算
4. 🔪文字列を用いた常に同じ真偽値となる演算
5. 🔪正規表現を用いた常に同じ真偽値となる演算
6. 🔪空集合要素を作る演算

[付録]
1. 🧰対象言語と環境


"
topics: ["deadCode", "unreachableCode", "デッドコードクックブック", "デッドコードレシピ"]
published: false
price: 0
chapters:
  - introduction
  - index
  - p_after
  - r_after_return
  - r_after_throw
  - r_after_break
  - r_after_goto
  - r_after_exit
  - r_after_func_throw
  - r_after_break_yield
  - r_after_runtime_error
  - r_after_assert
  - p_forever
  - r_forever_loop
  - r_forever_func
  - p_simple_if
  - r_simple_if_literal
  - r_simple_if_const
  - r_simple_if_variable
  - r_simple_if_operation
  - p_parallel_if
  - r_parallel_elseif
  - r_parallel_switch_case
  - r_parallel_else
  - r_parallel_switch_default
  - p_nest_if
  - r_nest_if
  - p_cond_other
  - r_cond_other_for
  - r_cond_other_while
  - r_cond_other_ternary
  - r_cond_other_short_circuit 
  - r_cond_other_catch
  - r_cond_other_iterator
  - r_cond_other_null
  - p_func
  - r_func_empty
  - r_func_arg
  - p_def
  - r_def_func
  - r_def_method
  - r_def_override
  - p_other
  - r_other_generator_yield
  - a_after_stop_delete
  - a_after_stop_move
  - a_after_fix_runtime_error
  - a_fix_call
  - z_goto
  - z_hoisting
  - z_compile_delete
  - z_override_def
  - z_override_scope
  - t_forever_func
  - t_cond_comp
  - t_cond_num
  - t_cond_str
  - t_cond_regex
  - t_empty_set
  - environment
  - afterword
